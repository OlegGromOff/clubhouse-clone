Проект использует Next.js и TypeScript.js 

Next.js позволяет рендерить реакт приложение на серверной части SSR(хорошо для seo)
Очень крутая штука 
https://nextjs.org/docs/getting-started/installation

Создаем проект next.js:
npx create-next-app@latest clubhouse-clone

Запустить next.js проект: npm run dev (не npm run start, npm run start используй в продакшн а не в режиме разработки)

В next.js создаем страницы в папке pages, их можно создавать как в реакте, но важно что бы название файла было с маленькой буквы и в названии файла не было пробелов, например: index.tsx, about.tsx, contacts.tsx
Мы не используем роуты, next.js сам создает роуты на основе названия файла в папке pages, например если у нас есть файл index.tsx, то по умолчанию он будет открываться по адресу localhost:3000, если у нас есть файл about.tsx, то он будет открываться по адресу localhost:3000/about
Используем Link из next.js для перехода по страницам, вместо того что бы использовать тег <a></a>, т.к. тег <a></a> перезагружает страницу, а Link из next.js не перезагружает страницу, а просто переходит по ссылке, как в реакте
Используем Link из next.js так: import Link from 'next/link'    <Link href="/about"><a>About</a></Link> то есть внутри тега <Link></Link> используем тег <a></a> и в атрибуте href указываем путь к странице, которую хотим открыть, в данном случае это страница about.tsx, которая находится в папке pages, поэтому путь к ней просто /about

Есть static generation и server side red рендеринг в next.js
Server side rendering используем когда надо динамически отображать данные с сервера(если что то меняется на сервере, то это сразу отображается на клиенте)
Если надо отображать статические данные, то используем static generation

npm i node-sass - устанавливаем sass
npm i clsx - устанавливаем clsx, он нужен для того что бы добавлять несколько классов к одному элементу, например: className={clsx(styles.button, styles.primary)} - аналог classnames в реакте

Установим 
npm i typescript @types/node @types/react -D

npm i axios - устанавливаем axios

Чтобы в next.js обратиться к странице /profile/123 надо создать папку profile и в ней создать файл [id].tsx (в квадратных скобках можно указать что угодно), в нем мы можем получить id так: const { query } = useRouter() и дальше обращаемся к id так: query.id

В next.js можно создавать свой бекенд на основе api, для этого создаем папку pages/api и в ней создаем файлы, например: pages/api/rooms.tsx, pages/api/user.tsx, pages/api/rooms/[id].tsx, pages/api/rooms/[id]/users.tsx  

